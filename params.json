{"name":"Poller","tagline":"A simple and composable HTTP monitoring application written in Go","body":"# Poller\r\n\r\nA composable HTTP monitoring framework and application written in Go.\r\n\r\nIt's very alpha for now, so please bear with it.\r\n\r\n## What is it?\r\n\r\nPoller's job is to monitor http applications by submitting GET requests to URL\r\nyou define in a config file. These URLs are called \"Checks\".\r\n\r\nOnce a check is done, the result is sent to one or many backends of your choice. \r\n\r\nCurrent supported backends are stdout, syslog,\r\n[librato](http://metrics.librato.com/) and [statsd](://github.com/etsy/statsd).\r\n\r\n## How to build it\r\n\r\nGiven you have a working go install, this command will produce the poller\r\nbinary in `./bin/poller`\r\n\r\n    $ ./bin/build\r\n\r\n## How to configure it\r\n\r\nConfiguration is done via:\r\n\r\n- Environment variables for backend.\r\n- JSON for list of checks\r\n- Flags passed when executing the program.\r\n\r\nA typical json file for checks looks like this\r\n\r\n    [\r\n        {\r\n            \"key\": \"com_google\",                // Key should be unique among all checks specified\r\n            \"url\": \"http://google.com\",         // URL of the check\r\n            \"interval\": \"10s\",                  // Check will be perfom every 10s. Format available here: http://godoc.org/time#ParseDuration\r\n            \"alert\": true,                      // (optional) Enable \"alerts\" for this checks.\r\n            \"alertDelay\": \"60s\"                 // (required if alert is set) Wait 60s (or 6 other checks after the first downtime) before sending an alert\r\n        },\r\n        {\r\n            \"key\": \"fr_yahoo\",\r\n            \"url\": \"http://yahoo.fr\",\r\n            \"interval\": \"10s\"\r\n        },\r\n        {\r\n            \"key\": \"connect_sensiolabs_com_api\",\r\n            \"url\": \"https://connect.sensiolabs.com/api/\",\r\n            \"interval\": \"60s\",\r\n            \"headers\": {\r\n                \"Accept\": \"application/vnd.com.sensiolabs.connect+xml\"  // (optional) Added HTTP header\r\n            }\r\n        }\r\n    ]\r\n\r\nThe JSON config file is optional as checks can be added thanks to the HTTP endpoint `/checks`.\r\n\r\nRunning `./poller --help` will prints a list of available options.\r\n\r\n## How to monitor it?\r\n\r\nA `/health` http endpoint is available. If poller is answering a 200, then all\r\nis good!\r\n\r\n## How to receive alerts when a check is down?\r\n\r\nAlerting and alerting delay is customisable for each check (Please read the example configuration).\r\n\"Alerters\" are enabled from the command line with the `--alerts` flag. \r\n\r\n    # Enable the smtp alerter\r\n    ./poller --alerts=\"smtp\"\r\n\r\n    # Enable both the pagerduty and smtp alerter\r\n    ./poller --alerts=\"smtp,pagerduty\"\r\n\r\n### SMTP Alerter\r\n\r\nThe SMTP Alerter is enabled when you run poller like this:\r\n\r\n    ./poller --alerts=\"smtp\"\r\n\r\nSMTP alerter is configured using these environment variables:\r\n\r\n- `SMTP_HOST`: (required) ie: localhost\r\n- `SMTP_PORT`: (required) ie: 25\r\n- `SMTP_AUTH`: (optional) \"MD5\" or \"PLAIN\"\r\n- `SMTP_USERNAME`: (optional)\r\n- `SMTP_PASSWORD`: (optional)\r\n- `SMTP_PLAIN_IDENTITY`: (optional)\r\n- `SMTP_RECIPIENT`: (required) ie: monitoring@example.org\r\n- `SMTP_FROM`: (required) ie: poller@example.org\r\n\r\n#### PagerDuty Alerter\r\n\r\nThe PagerDuty alerter is enabled when you run poller like this:\r\n\r\n    ./poller --alerts=\"pagerduty\"\r\n\r\n[PagerDuty](http://www.pagerduty.com/)'s alerter is configured using these environment variables: \r\n\r\n- `PAGERDUTY_SERVICE_KEY`: (required) PagerDuty's Service Key. [Please read the Getting started section](http://developer.pagerduty.com/documentation/integration/events).\r\n\r\n## How to add checks while poller is running\r\n\r\nPoller supports live configuration changes thanks to the `/checks` http endpoint.\r\nSend a `PUT` request with a valid config JSON in the body of the request and poller\r\nwill append the checks to its list.\r\n\r\n### Backends configuration\r\n\r\nHere is a list of supported backend and how to configure them with environment\r\nvariables. Backends are enabled from the command-line thanks to the `--backend` flag.\r\n\r\n    # Enable the stdout backend\r\n    ./poller --backends=\"stdout\"\r\n\r\n    # Enable both the librato and stdout backend\r\n    ./poller --backends=\"librato,stdout\"\r\n\r\n#### Librato\r\n\r\n- `LIBRATO_USER` (required): Username of your librato account\r\n- `LIBRATO_TOKEN` (required): API token of your librato account\r\n- `LIBRATO_SOURCE` (optional): Source name for your metrics. Defaults to `poller`\r\n- `LIBRATO_PREFIX` (optional): Prefix of your metrics. Defaults to `poller.checks.`\r\n\r\nGiven your check's key is `foobar` and `LIBRATO_PREFIX` is `acme.`:\r\n\r\nOn success:\r\n  - `1` will be sent to metrics `acme.foobar.up`\r\n  - The duration in milliseconds will be sent to `foobar.duration`\r\n\r\nOn error or timeout:\r\n  - `0` will be sent to metrics `acme.foobar.up`\r\n  - The duration in milliseconds will be sent to `foobar.duration`\r\n\r\n#### Stdout\r\n\r\nNo configuration is necessary.\r\nOutput will look like this:\r\n\r\n    2012/01/24 11:35:16 com_google UP 345.271ms\r\n    2012/01/24 11:35:17 fr_yahoo DOWN 1.518175s\r\n    2012/01/24 11:35:17 fr_yahoo ALERT Down since 2006-01-02 15:04:05.999999999 -0700 MST\r\n\r\n#### Statsd\r\n\r\nStatsd backend uses of these environment variables:\r\n\r\n- `STATSD_HOST` (required): Host of your statsd instance\r\n- `STATSD_PORT` (optional): Port of your statsd instance. Defaults to 8125.\r\n- `STATSD_PROTOCOL` (optional): Either `tcp` or `udp`. Defaults to `udp`.\r\n- `STATSD_PREFIX` (optional): Prefix of your metrics. Defaults to `poller.checks.`\r\n\r\nThe metrics are sent the same way as the Librato backend.\r\n\r\n#### Syslog\r\n\r\nYou can configure the syslog backend with these:\r\n\r\n- `SYSLOG_NETWORK` (optional): \"tcp\", \"tcp4\" (IPv4-only), \"tcp6\" (IPv6-only),\r\n  \"udp\", \"udp4\" (IPv4-only), \"udp6\" (IPv6-only), \"ip\", \"ip4\" (IPv4-only), \"ip6\"\r\n  (IPv6-only), \"unix\" and \"unixpacket\". Defaults to nothing.\r\n- `SYSLOG_ADDRESS` (optional): Address of your syslog daemon. Defaults to nothing.\r\n- `SYSLOG_PREFIX` (optional): This will be added to your log. Defaults to \"poller\".\r\n\r\nYes, you can send checks results to [loggly](http://www.loggly.com/) by using\r\nthe syslog backend.\r\n\r\nOutput formatting is the same as the stdout backend.\r\n\r\n## Technical documentation\r\n\r\nPoller's documentation is available on godoc: [http://godoc.org/github.com/marcw/poller](http://godoc.org/github.com/marcw/poller)\r\n\r\n## Why Go?\r\n\r\nA Go application has the advantage of being concurrent, fast, cross-compilable\r\nand easily deployable. I think that's a lot of good reasons to create a\r\nmonitoring system out of this language.\r\n\r\n### Install go\r\n\r\nnote: OSX users, do NOT install Go from homebrew. At time of writing, the\r\npackage is broken and won't let you cross-compile.\r\n\r\nPlease follow instructions from:\r\n[http://golang.org/doc/install/source](http://golang.org/doc/install/source)\r\n\r\nPlease set a `$GOROOT` env var in your `~/.bashrc.` file. If you unpacked the\r\ngo source in `/home/you/go`:\r\n\r\n    export GOROOT=/home/you/go\r\n\r\nPlease also set a `$GOPATH` env var in your `~/.bashrc` file. `$GOPATH` is\r\nwhere go will look for packages and where you clone private projects.  An\r\nexample of `$GOPATH` would be `/home/you/work/go`.\r\n\r\n    export GOPATH=/home/you/work/go\r\n\r\n### Enable cross compilation with Go\r\n\r\nFollow this really good blogpost:\r\n[http://dave.cheney.net/2012/09/08/an-introduction-to-cross-compilation-with-go](http://dave.cheney.net/2012/09/08/an-introduction-to-cross-compilation-with-go)\r\n\r\n## License\r\n\r\nThe Poller code is free to use and distribute, under the [MIT license](https://github.com/marcw/poller/blob/master/LICENSE).\r\n\r\n[![Build Status](https://travis-ci.org/marcw/poller.png?branch=master)](https://travis-ci.org/marcw/poller)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}